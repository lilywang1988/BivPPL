// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// beta_PPL_loop
void beta_PPL_loop(arma::mat& R1_j, arma::mat& R2_j, arma::mat& z1_j, arma::mat& z2_j, arma::vec& delta1_j, arma::vec& delta2_j, arma::vec& exp_eta1, arma::vec& exp_eta2, arma::vec& beta1_scr, arma::vec& beta2_scr, arma::vec& r_scr, arma::mat& beta1_inf, arma::mat& beta2_inf, arma::mat& r_inf, arma::mat& beta1_r_inf, arma::mat& beta2_r_inf, int m, arma::vec& eta1, arma::vec& eta2);
RcppExport SEXP _BivPPL_beta_PPL_loop(SEXP R1_jSEXP, SEXP R2_jSEXP, SEXP z1_jSEXP, SEXP z2_jSEXP, SEXP delta1_jSEXP, SEXP delta2_jSEXP, SEXP exp_eta1SEXP, SEXP exp_eta2SEXP, SEXP beta1_scrSEXP, SEXP beta2_scrSEXP, SEXP r_scrSEXP, SEXP beta1_infSEXP, SEXP beta2_infSEXP, SEXP r_infSEXP, SEXP beta1_r_infSEXP, SEXP beta2_r_infSEXP, SEXP mSEXP, SEXP eta1SEXP, SEXP eta2SEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type R1_j(R1_jSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type R2_j(R2_jSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type z1_j(z1_jSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type z2_j(z2_jSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type delta1_j(delta1_jSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type delta2_j(delta2_jSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type exp_eta1(exp_eta1SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type exp_eta2(exp_eta2SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type beta1_scr(beta1_scrSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type beta2_scr(beta2_scrSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type r_scr(r_scrSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type beta1_inf(beta1_infSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type beta2_inf(beta2_infSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type r_inf(r_infSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type beta1_r_inf(beta1_r_infSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type beta2_r_inf(beta2_r_infSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type eta1(eta1SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type eta2(eta2SEXP);
    beta_PPL_loop(R1_j, R2_j, z1_j, z2_j, delta1_j, delta2_j, exp_eta1, exp_eta2, beta1_scr, beta2_scr, r_scr, beta1_inf, beta2_inf, r_inf, beta1_r_inf, beta2_r_inf, m, eta1, eta2);
    return R_NilValue;
END_RCPP
}
// beta_PPL_loop_huge
void beta_PPL_loop_huge(arma::vec& R1_j, arma::vec& R2_j, arma::mat& z1_j, arma::mat& z2_j, arma::vec& delta1_j, arma::vec& delta2_j, arma::vec& exp_eta1, arma::vec& exp_eta2, arma::vec& beta1_scr, arma::vec& beta2_scr, arma::vec& r_scr, arma::mat& beta1_inf, arma::mat& beta2_inf, arma::cube& r_inf, arma::mat& beta1_r_inf, arma::mat& beta2_r_inf, int m, int N, arma::vec& eta1, arma::vec& eta2);
RcppExport SEXP _BivPPL_beta_PPL_loop_huge(SEXP R1_jSEXP, SEXP R2_jSEXP, SEXP z1_jSEXP, SEXP z2_jSEXP, SEXP delta1_jSEXP, SEXP delta2_jSEXP, SEXP exp_eta1SEXP, SEXP exp_eta2SEXP, SEXP beta1_scrSEXP, SEXP beta2_scrSEXP, SEXP r_scrSEXP, SEXP beta1_infSEXP, SEXP beta2_infSEXP, SEXP r_infSEXP, SEXP beta1_r_infSEXP, SEXP beta2_r_infSEXP, SEXP mSEXP, SEXP NSEXP, SEXP eta1SEXP, SEXP eta2SEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type R1_j(R1_jSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type R2_j(R2_jSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type z1_j(z1_jSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type z2_j(z2_jSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type delta1_j(delta1_jSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type delta2_j(delta2_jSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type exp_eta1(exp_eta1SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type exp_eta2(exp_eta2SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type beta1_scr(beta1_scrSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type beta2_scr(beta2_scrSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type r_scr(r_scrSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type beta1_inf(beta1_infSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type beta2_inf(beta2_infSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type r_inf(r_infSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type beta1_r_inf(beta1_r_infSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type beta2_r_inf(beta2_r_infSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type eta1(eta1SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type eta2(eta2SEXP);
    beta_PPL_loop_huge(R1_j, R2_j, z1_j, z2_j, delta1_j, delta2_j, exp_eta1, exp_eta2, beta1_scr, beta2_scr, r_scr, beta1_inf, beta2_inf, r_inf, beta1_r_inf, beta2_r_inf, m, N, eta1, eta2);
    return R_NilValue;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_BivPPL_beta_PPL_loop", (DL_FUNC) &_BivPPL_beta_PPL_loop, 19},
    {"_BivPPL_beta_PPL_loop_huge", (DL_FUNC) &_BivPPL_beta_PPL_loop_huge, 20},
    {NULL, NULL, 0}
};

RcppExport void R_init_BivPPL(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
